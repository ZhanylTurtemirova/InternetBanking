// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptionsTest.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Регистрация пользователя")]
    public partial class РегистрацияПользователяFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Registration.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "Регистрация пользователя", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Администратор успешно регистрирует физ лицо со счетом")]
        [NUnit.Framework.CategoryAttribute("correct")]
        public virtual void АдминистраторУспешноРегистрируетФизЛицоСоСчетом()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор успешно регистрирует физ лицо со счетом", new string[] {
                        "correct"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 9
testRunner.Given("Открыта cтраница регистрации физ лица", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 10
testRunner.When("заполняю все поля в форме регистрации правильно", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 11
testRunner.And("создаю счет физ лицу", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 12
testRunner.Then("вижу страницу со счетами физ лица", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Администратор регистрирует физ лицо не заполняя поля.")]
        [NUnit.Framework.CategoryAttribute("fail")]
        public virtual void АдминистраторРегистрируетФизЛицоНеЗаполняяПоля_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор регистрирует физ лицо не заполняя поля.", new string[] {
                        "fail"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 16
testRunner.Given("Открыта cтраница регистрации физ лица", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 17
testRunner.When("не заполняю все поля в форме регистрации", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 18
testRunner.Then("вижу страницу регистрации физ лица с валидацией о пустых полях.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Администратор регистрирует физ лицо заполняя поля неправильно.")]
        [NUnit.Framework.CategoryAttribute("fail")]
        public virtual void АдминистраторРегистрируетФизЛицоЗаполняяПоляНеправильно_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор регистрирует физ лицо заполняя поля неправильно.", new string[] {
                        "fail"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 22
testRunner.Given("Открыта cтраница регистрации физ лица", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 23
testRunner.When("заполняю поля в форме регистрации неправильно", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 24
testRunner.Then("вижу страницу регистрации физ лица с валидацией о неправильном вводе данных.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Администратор успешно регистрирует юр лицо со счетом и сотрудником")]
        [NUnit.Framework.CategoryAttribute("correct")]
        public virtual void АдминистраторУспешноРегистрируетЮрЛицоСоСчетомИСотрудником()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор успешно регистрирует юр лицо со счетом и сотрудником", new string[] {
                        "correct"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 28
testRunner.Given("Открыта cтраница регистрации юр лица", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 29
testRunner.When("заполняю все поля в форме регистрации юр лица правильно", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 30
testRunner.And("создаю сотрудника", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 31
testRunner.And("создаю счет юр лицу", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "И ");
#line 32
testRunner.Then("вижу страницу с информацией о компании", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Администратор регистрирует юр лицо не заполняя поля.")]
        [NUnit.Framework.CategoryAttribute("fail")]
        public virtual void АдминистраторРегистрируетЮрЛицоНеЗаполняяПоля_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор регистрирует юр лицо не заполняя поля.", new string[] {
                        "fail"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 36
testRunner.Given("Открыта cтраница регистрации юр лица", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 37
testRunner.When("не заполняю все поля в форме регистрации юр лица", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 38
testRunner.Then("вижу страницу регистрации юр лица с валидацией о пустых полях.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Администратор регистрирует юр лицо заполняя поля неправильно.")]
        [NUnit.Framework.CategoryAttribute("fail")]
        public virtual void АдминистраторРегистрируетЮрЛицоЗаполняяПоляНеправильно_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор регистрирует юр лицо заполняя поля неправильно.", new string[] {
                        "fail"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 42
testRunner.Given("Открыта cтраница регистрации юр лица", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 43
testRunner.When("заполняю поля в форме регистрации юр лица неправильно", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 44
testRunner.Then("вижу страницу регистрации юр лица о неправильном вводе данных.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Администратор регистрирует сотрудника не заполняя поля.")]
        [NUnit.Framework.CategoryAttribute("fail")]
        public virtual void АдминистраторРегистрируетСотрудникаНеЗаполняяПоля_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Администратор регистрирует сотрудника не заполняя поля.", new string[] {
                        "fail"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 48
testRunner.Given("Открыта cтраница регистрации сотрудника", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Допустим ");
#line 49
testRunner.When("не заполняю поля в форме сотрудника", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 50
testRunner.Then("вижу страницу с валидацией формы сотрудника", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
